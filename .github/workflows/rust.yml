name: Test and Build Rust

on:
  push:
  pull_request:

jobs:
  test:
    name: Test ${{ matrix.toolchain }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
        os:
          - ubuntu-20.04
          - macos-11
          - windows-2022
        clippyargs:
          - -D clippy::pedantic -D warnings
        features:
          - --all-features
        include:
          # Check future versions and maybe get some glances on soon to be lints
          - toolchain: beta
            os: ubuntu-20.04
            features: --all-features
            clippyargs: -W clippy::pedantic -W clippy::nursery
          - toolchain: nightly
            os: ubuntu-20.04
            features: --all-features
            clippyargs: -W clippy::pedantic
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - uses: actions/checkout@v3

      - name: Fetch dependencies
        uses: actions-rs/cargo@v1
        with:
          command: fetch
          args: --verbose --locked

      - name: Check clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose --locked --all-targets ${{ matrix.features }} -- ${{ matrix.clippyargs }}

      - name: Check docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --verbose --locked --no-deps ${{ matrix.features }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --locked ${{ matrix.features }}

  github-release:
    name: Release ${{ matrix.triple }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - triple: arm-unknown-linux-gnueabihf
            os: ubuntu-20.04
          - triple: armv7-unknown-linux-gnueabihf
            os: ubuntu-20.04
          - triple: aarch64-unknown-linux-gnu
            os: ubuntu-20.04

          - triple: x86_64-apple-darwin
            os: macos-11
          - triple: aarch64-apple-darwin
            os: macos-11

          - triple: x86_64-pc-windows-msvc
            os: windows-2022
          # https://github.com/briansmith/ring/issues/1167
          # - triple: aarch64-pc-windows-msvc
          #   os: windows-2022
    steps:
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          target: ${{ matrix.triple }}
          toolchain: stable

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set artifact name
        shell: bash
        run: |
          version="$(git describe --tags --match "v*.*.*" --always)"
          echo "version: $version"
          echo "GIT_TAG_VERSION=$version" >> $GITHUB_ENV

          name="website-stalker-$version-${{ matrix.triple }}"
          echo "artifact: $name"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - name: Fetch dependencies
        uses: actions-rs/cargo@v1
        with:
          command: fetch
          args: --verbose --locked

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --locked --all-features --target ${{ matrix.triple }}
          use-cross: ${{ runner.os == 'Linux' && matrix.triple != 'x86_64-unknown-linux-gnu' }}

      - name: Package (*nix)
        if: runner.os != 'Windows'
        run: >
          tar -cv
          LICENSE README.md
          systemd/**/*.service systemd/**/*.timer systemd/**/*.conf
          -C target/ completions/ -C ../
          -C target/${{ matrix.triple }}/release/ website-stalker
          | gzip --best > ${{ env.ARTIFACT_NAME }}.tar.gz
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: >
          7z a ${{ env.ARTIFACT_NAME }}.zip
          LICENSE README.md
          ./target/completions/
          ./target/${{ matrix.triple }}/release/website-stalker.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.triple }}
          path: |
            *.zip
            *.tar.gz

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz

  aur-publish:
    name: AUR ${{ matrix.name }}
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    needs: github-release
    strategy:
      fail-fast: false
      matrix:
        name:
          - website-stalker
          - website-stalker-bin
    steps:
      - uses: ATiltedTree/create-aur-release@v1
        with:
          package_name: ${{ matrix.name }}
          commit_username: GitHub Actions
          commit_email: website-stalker-github-actions@edjopato.de
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
